/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKGPIO_H
#define _MOCKGPIO_H

#include "unity.h"
#include "gpio.h"
#include "CException.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockgpio_Init(void);
void Mockgpio_Destroy(void);
void Mockgpio_Verify(void);




#define gpio__construct_IgnoreAndReturn(cmock_retval) gpio__construct_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void gpio__construct_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, gpio_s cmock_to_return);
#define gpio__construct_ExpectAnyArgsAndReturn(cmock_retval) gpio__construct_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void gpio__construct_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, gpio_s cmock_to_return);
#define gpio__construct_ExpectAndReturn(port, pin_number_0_to_31, cmock_retval) gpio__construct_CMockExpectAndReturn(__LINE__, port, pin_number_0_to_31, cmock_retval)
void gpio__construct_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, gpio__port_e port, uint8_t pin_number_0_to_31, gpio_s cmock_to_return);
typedef gpio_s (* CMOCK_gpio__construct_CALLBACK)(gpio__port_e port, uint8_t pin_number_0_to_31, int cmock_num_calls);
void gpio__construct_AddCallback(CMOCK_gpio__construct_CALLBACK Callback);
void gpio__construct_Stub(CMOCK_gpio__construct_CALLBACK Callback);
#define gpio__construct_StubWithCallback gpio__construct_Stub
#define gpio__construct_ExpectAndThrow(port, pin_number_0_to_31, cmock_to_throw) gpio__construct_CMockExpectAndThrow(__LINE__, port, pin_number_0_to_31, cmock_to_throw)
void gpio__construct_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, gpio__port_e port, uint8_t pin_number_0_to_31, CEXCEPTION_T cmock_to_throw);
#define gpio__construct_IgnoreArg_port() gpio__construct_CMockIgnoreArg_port(__LINE__)
void gpio__construct_CMockIgnoreArg_port(UNITY_LINE_TYPE cmock_line);
#define gpio__construct_IgnoreArg_pin_number_0_to_31() gpio__construct_CMockIgnoreArg_pin_number_0_to_31(__LINE__)
void gpio__construct_CMockIgnoreArg_pin_number_0_to_31(UNITY_LINE_TYPE cmock_line);
#define gpio__construct_as_input_IgnoreAndReturn(cmock_retval) gpio__construct_as_input_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void gpio__construct_as_input_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, gpio_s cmock_to_return);
#define gpio__construct_as_input_ExpectAnyArgsAndReturn(cmock_retval) gpio__construct_as_input_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void gpio__construct_as_input_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, gpio_s cmock_to_return);
#define gpio__construct_as_input_ExpectAndReturn(port, pin_number_0_to_31, cmock_retval) gpio__construct_as_input_CMockExpectAndReturn(__LINE__, port, pin_number_0_to_31, cmock_retval)
void gpio__construct_as_input_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, gpio__port_e port, uint8_t pin_number_0_to_31, gpio_s cmock_to_return);
typedef gpio_s (* CMOCK_gpio__construct_as_input_CALLBACK)(gpio__port_e port, uint8_t pin_number_0_to_31, int cmock_num_calls);
void gpio__construct_as_input_AddCallback(CMOCK_gpio__construct_as_input_CALLBACK Callback);
void gpio__construct_as_input_Stub(CMOCK_gpio__construct_as_input_CALLBACK Callback);
#define gpio__construct_as_input_StubWithCallback gpio__construct_as_input_Stub
#define gpio__construct_as_input_ExpectAndThrow(port, pin_number_0_to_31, cmock_to_throw) gpio__construct_as_input_CMockExpectAndThrow(__LINE__, port, pin_number_0_to_31, cmock_to_throw)
void gpio__construct_as_input_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, gpio__port_e port, uint8_t pin_number_0_to_31, CEXCEPTION_T cmock_to_throw);
#define gpio__construct_as_input_IgnoreArg_port() gpio__construct_as_input_CMockIgnoreArg_port(__LINE__)
void gpio__construct_as_input_CMockIgnoreArg_port(UNITY_LINE_TYPE cmock_line);
#define gpio__construct_as_input_IgnoreArg_pin_number_0_to_31() gpio__construct_as_input_CMockIgnoreArg_pin_number_0_to_31(__LINE__)
void gpio__construct_as_input_CMockIgnoreArg_pin_number_0_to_31(UNITY_LINE_TYPE cmock_line);
#define gpio__construct_as_output_IgnoreAndReturn(cmock_retval) gpio__construct_as_output_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void gpio__construct_as_output_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, gpio_s cmock_to_return);
#define gpio__construct_as_output_ExpectAnyArgsAndReturn(cmock_retval) gpio__construct_as_output_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void gpio__construct_as_output_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, gpio_s cmock_to_return);
#define gpio__construct_as_output_ExpectAndReturn(port, pin_number_0_to_31, cmock_retval) gpio__construct_as_output_CMockExpectAndReturn(__LINE__, port, pin_number_0_to_31, cmock_retval)
void gpio__construct_as_output_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, gpio__port_e port, uint8_t pin_number_0_to_31, gpio_s cmock_to_return);
typedef gpio_s (* CMOCK_gpio__construct_as_output_CALLBACK)(gpio__port_e port, uint8_t pin_number_0_to_31, int cmock_num_calls);
void gpio__construct_as_output_AddCallback(CMOCK_gpio__construct_as_output_CALLBACK Callback);
void gpio__construct_as_output_Stub(CMOCK_gpio__construct_as_output_CALLBACK Callback);
#define gpio__construct_as_output_StubWithCallback gpio__construct_as_output_Stub
#define gpio__construct_as_output_ExpectAndThrow(port, pin_number_0_to_31, cmock_to_throw) gpio__construct_as_output_CMockExpectAndThrow(__LINE__, port, pin_number_0_to_31, cmock_to_throw)
void gpio__construct_as_output_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, gpio__port_e port, uint8_t pin_number_0_to_31, CEXCEPTION_T cmock_to_throw);
#define gpio__construct_as_output_IgnoreArg_port() gpio__construct_as_output_CMockIgnoreArg_port(__LINE__)
void gpio__construct_as_output_CMockIgnoreArg_port(UNITY_LINE_TYPE cmock_line);
#define gpio__construct_as_output_IgnoreArg_pin_number_0_to_31() gpio__construct_as_output_CMockIgnoreArg_pin_number_0_to_31(__LINE__)
void gpio__construct_as_output_CMockIgnoreArg_pin_number_0_to_31(UNITY_LINE_TYPE cmock_line);
#define gpio__construct_with_function_IgnoreAndReturn(cmock_retval) gpio__construct_with_function_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void gpio__construct_with_function_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, gpio_s cmock_to_return);
#define gpio__construct_with_function_ExpectAnyArgsAndReturn(cmock_retval) gpio__construct_with_function_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void gpio__construct_with_function_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, gpio_s cmock_to_return);
#define gpio__construct_with_function_ExpectAndReturn(port, pin_number_0_to_31, function, cmock_retval) gpio__construct_with_function_CMockExpectAndReturn(__LINE__, port, pin_number_0_to_31, function, cmock_retval)
void gpio__construct_with_function_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, gpio__port_e port, uint8_t pin_number_0_to_31, gpio__function_e function, gpio_s cmock_to_return);
typedef gpio_s (* CMOCK_gpio__construct_with_function_CALLBACK)(gpio__port_e port, uint8_t pin_number_0_to_31, gpio__function_e function, int cmock_num_calls);
void gpio__construct_with_function_AddCallback(CMOCK_gpio__construct_with_function_CALLBACK Callback);
void gpio__construct_with_function_Stub(CMOCK_gpio__construct_with_function_CALLBACK Callback);
#define gpio__construct_with_function_StubWithCallback gpio__construct_with_function_Stub
#define gpio__construct_with_function_ExpectAndThrow(port, pin_number_0_to_31, function, cmock_to_throw) gpio__construct_with_function_CMockExpectAndThrow(__LINE__, port, pin_number_0_to_31, function, cmock_to_throw)
void gpio__construct_with_function_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, gpio__port_e port, uint8_t pin_number_0_to_31, gpio__function_e function, CEXCEPTION_T cmock_to_throw);
#define gpio__construct_with_function_IgnoreArg_port() gpio__construct_with_function_CMockIgnoreArg_port(__LINE__)
void gpio__construct_with_function_CMockIgnoreArg_port(UNITY_LINE_TYPE cmock_line);
#define gpio__construct_with_function_IgnoreArg_pin_number_0_to_31() gpio__construct_with_function_CMockIgnoreArg_pin_number_0_to_31(__LINE__)
void gpio__construct_with_function_CMockIgnoreArg_pin_number_0_to_31(UNITY_LINE_TYPE cmock_line);
#define gpio__construct_with_function_IgnoreArg_function() gpio__construct_with_function_CMockIgnoreArg_function(__LINE__)
void gpio__construct_with_function_CMockIgnoreArg_function(UNITY_LINE_TYPE cmock_line);
#define gpio__set_function_Ignore() gpio__set_function_CMockIgnore()
void gpio__set_function_CMockIgnore(void);
#define gpio__set_function_ExpectAnyArgs() gpio__set_function_CMockExpectAnyArgs(__LINE__)
void gpio__set_function_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define gpio__set_function_Expect(gpio, function) gpio__set_function_CMockExpect(__LINE__, gpio, function)
void gpio__set_function_CMockExpect(UNITY_LINE_TYPE cmock_line, gpio_s gpio, gpio__function_e function);
typedef void (* CMOCK_gpio__set_function_CALLBACK)(gpio_s gpio, gpio__function_e function, int cmock_num_calls);
void gpio__set_function_AddCallback(CMOCK_gpio__set_function_CALLBACK Callback);
void gpio__set_function_Stub(CMOCK_gpio__set_function_CALLBACK Callback);
#define gpio__set_function_StubWithCallback gpio__set_function_Stub
#define gpio__set_function_ExpectAndThrow(gpio, function, cmock_to_throw) gpio__set_function_CMockExpectAndThrow(__LINE__, gpio, function, cmock_to_throw)
void gpio__set_function_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, gpio_s gpio, gpio__function_e function, CEXCEPTION_T cmock_to_throw);
#define gpio__set_function_IgnoreArg_gpio() gpio__set_function_CMockIgnoreArg_gpio(__LINE__)
void gpio__set_function_CMockIgnoreArg_gpio(UNITY_LINE_TYPE cmock_line);
#define gpio__set_function_IgnoreArg_function() gpio__set_function_CMockIgnoreArg_function(__LINE__)
void gpio__set_function_CMockIgnoreArg_function(UNITY_LINE_TYPE cmock_line);
#define gpio__enable_open_drain_Ignore() gpio__enable_open_drain_CMockIgnore()
void gpio__enable_open_drain_CMockIgnore(void);
#define gpio__enable_open_drain_ExpectAnyArgs() gpio__enable_open_drain_CMockExpectAnyArgs(__LINE__)
void gpio__enable_open_drain_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define gpio__enable_open_drain_Expect(gpio) gpio__enable_open_drain_CMockExpect(__LINE__, gpio)
void gpio__enable_open_drain_CMockExpect(UNITY_LINE_TYPE cmock_line, gpio_s gpio);
typedef void (* CMOCK_gpio__enable_open_drain_CALLBACK)(gpio_s gpio, int cmock_num_calls);
void gpio__enable_open_drain_AddCallback(CMOCK_gpio__enable_open_drain_CALLBACK Callback);
void gpio__enable_open_drain_Stub(CMOCK_gpio__enable_open_drain_CALLBACK Callback);
#define gpio__enable_open_drain_StubWithCallback gpio__enable_open_drain_Stub
#define gpio__enable_open_drain_ExpectAndThrow(gpio, cmock_to_throw) gpio__enable_open_drain_CMockExpectAndThrow(__LINE__, gpio, cmock_to_throw)
void gpio__enable_open_drain_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, gpio_s gpio, CEXCEPTION_T cmock_to_throw);
#define gpio__enable_open_drain_IgnoreArg_gpio() gpio__enable_open_drain_CMockIgnoreArg_gpio(__LINE__)
void gpio__enable_open_drain_CMockIgnoreArg_gpio(UNITY_LINE_TYPE cmock_line);
#define gpio__enable_pull_down_resistors_Ignore() gpio__enable_pull_down_resistors_CMockIgnore()
void gpio__enable_pull_down_resistors_CMockIgnore(void);
#define gpio__enable_pull_down_resistors_ExpectAnyArgs() gpio__enable_pull_down_resistors_CMockExpectAnyArgs(__LINE__)
void gpio__enable_pull_down_resistors_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define gpio__enable_pull_down_resistors_Expect(gpio) gpio__enable_pull_down_resistors_CMockExpect(__LINE__, gpio)
void gpio__enable_pull_down_resistors_CMockExpect(UNITY_LINE_TYPE cmock_line, gpio_s gpio);
typedef void (* CMOCK_gpio__enable_pull_down_resistors_CALLBACK)(gpio_s gpio, int cmock_num_calls);
void gpio__enable_pull_down_resistors_AddCallback(CMOCK_gpio__enable_pull_down_resistors_CALLBACK Callback);
void gpio__enable_pull_down_resistors_Stub(CMOCK_gpio__enable_pull_down_resistors_CALLBACK Callback);
#define gpio__enable_pull_down_resistors_StubWithCallback gpio__enable_pull_down_resistors_Stub
#define gpio__enable_pull_down_resistors_ExpectAndThrow(gpio, cmock_to_throw) gpio__enable_pull_down_resistors_CMockExpectAndThrow(__LINE__, gpio, cmock_to_throw)
void gpio__enable_pull_down_resistors_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, gpio_s gpio, CEXCEPTION_T cmock_to_throw);
#define gpio__enable_pull_down_resistors_IgnoreArg_gpio() gpio__enable_pull_down_resistors_CMockIgnoreArg_gpio(__LINE__)
void gpio__enable_pull_down_resistors_CMockIgnoreArg_gpio(UNITY_LINE_TYPE cmock_line);
#define gpio__set_as_input_Ignore() gpio__set_as_input_CMockIgnore()
void gpio__set_as_input_CMockIgnore(void);
#define gpio__set_as_input_ExpectAnyArgs() gpio__set_as_input_CMockExpectAnyArgs(__LINE__)
void gpio__set_as_input_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define gpio__set_as_input_Expect(gpio) gpio__set_as_input_CMockExpect(__LINE__, gpio)
void gpio__set_as_input_CMockExpect(UNITY_LINE_TYPE cmock_line, gpio_s gpio);
typedef void (* CMOCK_gpio__set_as_input_CALLBACK)(gpio_s gpio, int cmock_num_calls);
void gpio__set_as_input_AddCallback(CMOCK_gpio__set_as_input_CALLBACK Callback);
void gpio__set_as_input_Stub(CMOCK_gpio__set_as_input_CALLBACK Callback);
#define gpio__set_as_input_StubWithCallback gpio__set_as_input_Stub
#define gpio__set_as_input_ExpectAndThrow(gpio, cmock_to_throw) gpio__set_as_input_CMockExpectAndThrow(__LINE__, gpio, cmock_to_throw)
void gpio__set_as_input_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, gpio_s gpio, CEXCEPTION_T cmock_to_throw);
#define gpio__set_as_input_IgnoreArg_gpio() gpio__set_as_input_CMockIgnoreArg_gpio(__LINE__)
void gpio__set_as_input_CMockIgnoreArg_gpio(UNITY_LINE_TYPE cmock_line);
#define gpio__set_as_output_Ignore() gpio__set_as_output_CMockIgnore()
void gpio__set_as_output_CMockIgnore(void);
#define gpio__set_as_output_ExpectAnyArgs() gpio__set_as_output_CMockExpectAnyArgs(__LINE__)
void gpio__set_as_output_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define gpio__set_as_output_Expect(gpio) gpio__set_as_output_CMockExpect(__LINE__, gpio)
void gpio__set_as_output_CMockExpect(UNITY_LINE_TYPE cmock_line, gpio_s gpio);
typedef void (* CMOCK_gpio__set_as_output_CALLBACK)(gpio_s gpio, int cmock_num_calls);
void gpio__set_as_output_AddCallback(CMOCK_gpio__set_as_output_CALLBACK Callback);
void gpio__set_as_output_Stub(CMOCK_gpio__set_as_output_CALLBACK Callback);
#define gpio__set_as_output_StubWithCallback gpio__set_as_output_Stub
#define gpio__set_as_output_ExpectAndThrow(gpio, cmock_to_throw) gpio__set_as_output_CMockExpectAndThrow(__LINE__, gpio, cmock_to_throw)
void gpio__set_as_output_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, gpio_s gpio, CEXCEPTION_T cmock_to_throw);
#define gpio__set_as_output_IgnoreArg_gpio() gpio__set_as_output_CMockIgnoreArg_gpio(__LINE__)
void gpio__set_as_output_CMockIgnoreArg_gpio(UNITY_LINE_TYPE cmock_line);
#define gpio__get_IgnoreAndReturn(cmock_retval) gpio__get_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void gpio__get_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define gpio__get_ExpectAnyArgsAndReturn(cmock_retval) gpio__get_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void gpio__get_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define gpio__get_ExpectAndReturn(gpio, cmock_retval) gpio__get_CMockExpectAndReturn(__LINE__, gpio, cmock_retval)
void gpio__get_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, gpio_s gpio, bool cmock_to_return);
typedef bool (* CMOCK_gpio__get_CALLBACK)(gpio_s gpio, int cmock_num_calls);
void gpio__get_AddCallback(CMOCK_gpio__get_CALLBACK Callback);
void gpio__get_Stub(CMOCK_gpio__get_CALLBACK Callback);
#define gpio__get_StubWithCallback gpio__get_Stub
#define gpio__get_ExpectAndThrow(gpio, cmock_to_throw) gpio__get_CMockExpectAndThrow(__LINE__, gpio, cmock_to_throw)
void gpio__get_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, gpio_s gpio, CEXCEPTION_T cmock_to_throw);
#define gpio__get_IgnoreArg_gpio() gpio__get_CMockIgnoreArg_gpio(__LINE__)
void gpio__get_CMockIgnoreArg_gpio(UNITY_LINE_TYPE cmock_line);
#define gpio__set_Ignore() gpio__set_CMockIgnore()
void gpio__set_CMockIgnore(void);
#define gpio__set_ExpectAnyArgs() gpio__set_CMockExpectAnyArgs(__LINE__)
void gpio__set_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define gpio__set_Expect(gpio) gpio__set_CMockExpect(__LINE__, gpio)
void gpio__set_CMockExpect(UNITY_LINE_TYPE cmock_line, gpio_s gpio);
typedef void (* CMOCK_gpio__set_CALLBACK)(gpio_s gpio, int cmock_num_calls);
void gpio__set_AddCallback(CMOCK_gpio__set_CALLBACK Callback);
void gpio__set_Stub(CMOCK_gpio__set_CALLBACK Callback);
#define gpio__set_StubWithCallback gpio__set_Stub
#define gpio__set_ExpectAndThrow(gpio, cmock_to_throw) gpio__set_CMockExpectAndThrow(__LINE__, gpio, cmock_to_throw)
void gpio__set_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, gpio_s gpio, CEXCEPTION_T cmock_to_throw);
#define gpio__set_IgnoreArg_gpio() gpio__set_CMockIgnoreArg_gpio(__LINE__)
void gpio__set_CMockIgnoreArg_gpio(UNITY_LINE_TYPE cmock_line);
#define gpio__reset_Ignore() gpio__reset_CMockIgnore()
void gpio__reset_CMockIgnore(void);
#define gpio__reset_ExpectAnyArgs() gpio__reset_CMockExpectAnyArgs(__LINE__)
void gpio__reset_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define gpio__reset_Expect(gpio) gpio__reset_CMockExpect(__LINE__, gpio)
void gpio__reset_CMockExpect(UNITY_LINE_TYPE cmock_line, gpio_s gpio);
typedef void (* CMOCK_gpio__reset_CALLBACK)(gpio_s gpio, int cmock_num_calls);
void gpio__reset_AddCallback(CMOCK_gpio__reset_CALLBACK Callback);
void gpio__reset_Stub(CMOCK_gpio__reset_CALLBACK Callback);
#define gpio__reset_StubWithCallback gpio__reset_Stub
#define gpio__reset_ExpectAndThrow(gpio, cmock_to_throw) gpio__reset_CMockExpectAndThrow(__LINE__, gpio, cmock_to_throw)
void gpio__reset_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, gpio_s gpio, CEXCEPTION_T cmock_to_throw);
#define gpio__reset_IgnoreArg_gpio() gpio__reset_CMockIgnoreArg_gpio(__LINE__)
void gpio__reset_CMockIgnoreArg_gpio(UNITY_LINE_TYPE cmock_line);
#define gpio__toggle_Ignore() gpio__toggle_CMockIgnore()
void gpio__toggle_CMockIgnore(void);
#define gpio__toggle_ExpectAnyArgs() gpio__toggle_CMockExpectAnyArgs(__LINE__)
void gpio__toggle_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define gpio__toggle_Expect(gpio) gpio__toggle_CMockExpect(__LINE__, gpio)
void gpio__toggle_CMockExpect(UNITY_LINE_TYPE cmock_line, gpio_s gpio);
typedef void (* CMOCK_gpio__toggle_CALLBACK)(gpio_s gpio, int cmock_num_calls);
void gpio__toggle_AddCallback(CMOCK_gpio__toggle_CALLBACK Callback);
void gpio__toggle_Stub(CMOCK_gpio__toggle_CALLBACK Callback);
#define gpio__toggle_StubWithCallback gpio__toggle_Stub
#define gpio__toggle_ExpectAndThrow(gpio, cmock_to_throw) gpio__toggle_CMockExpectAndThrow(__LINE__, gpio, cmock_to_throw)
void gpio__toggle_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, gpio_s gpio, CEXCEPTION_T cmock_to_throw);
#define gpio__toggle_IgnoreArg_gpio() gpio__toggle_CMockIgnoreArg_gpio(__LINE__)
void gpio__toggle_CMockIgnoreArg_gpio(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
