/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKBOARD_IO_H
#define _MOCKBOARD_IO_H

#include "unity.h"
#include "board_io.h"
#include "CException.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockboard_io_Init(void);
void Mockboard_io_Destroy(void);
void Mockboard_io_Verify(void);




#define board_io__initialize_Ignore() board_io__initialize_CMockIgnore()
void board_io__initialize_CMockIgnore(void);
#define board_io__initialize_Expect() board_io__initialize_CMockExpect(__LINE__)
void board_io__initialize_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_board_io__initialize_CALLBACK)(int cmock_num_calls);
void board_io__initialize_AddCallback(CMOCK_board_io__initialize_CALLBACK Callback);
void board_io__initialize_Stub(CMOCK_board_io__initialize_CALLBACK Callback);
#define board_io__initialize_StubWithCallback board_io__initialize_Stub
#define board_io__initialize_ExpectAndThrow(cmock_to_throw) board_io__initialize_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void board_io__initialize_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define board_io__sd_card_cs_Ignore() board_io__sd_card_cs_CMockIgnore()
void board_io__sd_card_cs_CMockIgnore(void);
#define board_io__sd_card_cs_Expect() board_io__sd_card_cs_CMockExpect(__LINE__)
void board_io__sd_card_cs_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_board_io__sd_card_cs_CALLBACK)(int cmock_num_calls);
void board_io__sd_card_cs_AddCallback(CMOCK_board_io__sd_card_cs_CALLBACK Callback);
void board_io__sd_card_cs_Stub(CMOCK_board_io__sd_card_cs_CALLBACK Callback);
#define board_io__sd_card_cs_StubWithCallback board_io__sd_card_cs_Stub
#define board_io__sd_card_cs_ExpectAndThrow(cmock_to_throw) board_io__sd_card_cs_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void board_io__sd_card_cs_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define board_io__sd_card_ds_Ignore() board_io__sd_card_ds_CMockIgnore()
void board_io__sd_card_ds_CMockIgnore(void);
#define board_io__sd_card_ds_Expect() board_io__sd_card_ds_CMockExpect(__LINE__)
void board_io__sd_card_ds_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_board_io__sd_card_ds_CALLBACK)(int cmock_num_calls);
void board_io__sd_card_ds_AddCallback(CMOCK_board_io__sd_card_ds_CALLBACK Callback);
void board_io__sd_card_ds_Stub(CMOCK_board_io__sd_card_ds_CALLBACK Callback);
#define board_io__sd_card_ds_StubWithCallback board_io__sd_card_ds_Stub
#define board_io__sd_card_ds_ExpectAndThrow(cmock_to_throw) board_io__sd_card_ds_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void board_io__sd_card_ds_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define board_io__sd_card_is_present_IgnoreAndReturn(cmock_retval) board_io__sd_card_is_present_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void board_io__sd_card_is_present_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define board_io__sd_card_is_present_ExpectAndReturn(cmock_retval) board_io__sd_card_is_present_CMockExpectAndReturn(__LINE__, cmock_retval)
void board_io__sd_card_is_present_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
typedef bool (* CMOCK_board_io__sd_card_is_present_CALLBACK)(int cmock_num_calls);
void board_io__sd_card_is_present_AddCallback(CMOCK_board_io__sd_card_is_present_CALLBACK Callback);
void board_io__sd_card_is_present_Stub(CMOCK_board_io__sd_card_is_present_CALLBACK Callback);
#define board_io__sd_card_is_present_StubWithCallback board_io__sd_card_is_present_Stub
#define board_io__sd_card_is_present_ExpectAndThrow(cmock_to_throw) board_io__sd_card_is_present_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void board_io__sd_card_is_present_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define board_io__get_led0_IgnoreAndReturn(cmock_retval) board_io__get_led0_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void board_io__get_led0_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, gpio_s cmock_to_return);
#define board_io__get_led0_ExpectAndReturn(cmock_retval) board_io__get_led0_CMockExpectAndReturn(__LINE__, cmock_retval)
void board_io__get_led0_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, gpio_s cmock_to_return);
typedef gpio_s (* CMOCK_board_io__get_led0_CALLBACK)(int cmock_num_calls);
void board_io__get_led0_AddCallback(CMOCK_board_io__get_led0_CALLBACK Callback);
void board_io__get_led0_Stub(CMOCK_board_io__get_led0_CALLBACK Callback);
#define board_io__get_led0_StubWithCallback board_io__get_led0_Stub
#define board_io__get_led0_ExpectAndThrow(cmock_to_throw) board_io__get_led0_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void board_io__get_led0_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define board_io__get_led1_IgnoreAndReturn(cmock_retval) board_io__get_led1_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void board_io__get_led1_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, gpio_s cmock_to_return);
#define board_io__get_led1_ExpectAndReturn(cmock_retval) board_io__get_led1_CMockExpectAndReturn(__LINE__, cmock_retval)
void board_io__get_led1_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, gpio_s cmock_to_return);
typedef gpio_s (* CMOCK_board_io__get_led1_CALLBACK)(int cmock_num_calls);
void board_io__get_led1_AddCallback(CMOCK_board_io__get_led1_CALLBACK Callback);
void board_io__get_led1_Stub(CMOCK_board_io__get_led1_CALLBACK Callback);
#define board_io__get_led1_StubWithCallback board_io__get_led1_Stub
#define board_io__get_led1_ExpectAndThrow(cmock_to_throw) board_io__get_led1_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void board_io__get_led1_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define board_io__get_led2_IgnoreAndReturn(cmock_retval) board_io__get_led2_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void board_io__get_led2_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, gpio_s cmock_to_return);
#define board_io__get_led2_ExpectAndReturn(cmock_retval) board_io__get_led2_CMockExpectAndReturn(__LINE__, cmock_retval)
void board_io__get_led2_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, gpio_s cmock_to_return);
typedef gpio_s (* CMOCK_board_io__get_led2_CALLBACK)(int cmock_num_calls);
void board_io__get_led2_AddCallback(CMOCK_board_io__get_led2_CALLBACK Callback);
void board_io__get_led2_Stub(CMOCK_board_io__get_led2_CALLBACK Callback);
#define board_io__get_led2_StubWithCallback board_io__get_led2_Stub
#define board_io__get_led2_ExpectAndThrow(cmock_to_throw) board_io__get_led2_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void board_io__get_led2_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define board_io__get_led3_IgnoreAndReturn(cmock_retval) board_io__get_led3_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void board_io__get_led3_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, gpio_s cmock_to_return);
#define board_io__get_led3_ExpectAndReturn(cmock_retval) board_io__get_led3_CMockExpectAndReturn(__LINE__, cmock_retval)
void board_io__get_led3_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, gpio_s cmock_to_return);
typedef gpio_s (* CMOCK_board_io__get_led3_CALLBACK)(int cmock_num_calls);
void board_io__get_led3_AddCallback(CMOCK_board_io__get_led3_CALLBACK Callback);
void board_io__get_led3_Stub(CMOCK_board_io__get_led3_CALLBACK Callback);
#define board_io__get_led3_StubWithCallback board_io__get_led3_Stub
#define board_io__get_led3_ExpectAndThrow(cmock_to_throw) board_io__get_led3_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void board_io__get_led3_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define board_io__get_sw0_IgnoreAndReturn(cmock_retval) board_io__get_sw0_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void board_io__get_sw0_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, gpio_s cmock_to_return);
#define board_io__get_sw0_ExpectAndReturn(cmock_retval) board_io__get_sw0_CMockExpectAndReturn(__LINE__, cmock_retval)
void board_io__get_sw0_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, gpio_s cmock_to_return);
typedef gpio_s (* CMOCK_board_io__get_sw0_CALLBACK)(int cmock_num_calls);
void board_io__get_sw0_AddCallback(CMOCK_board_io__get_sw0_CALLBACK Callback);
void board_io__get_sw0_Stub(CMOCK_board_io__get_sw0_CALLBACK Callback);
#define board_io__get_sw0_StubWithCallback board_io__get_sw0_Stub
#define board_io__get_sw0_ExpectAndThrow(cmock_to_throw) board_io__get_sw0_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void board_io__get_sw0_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define board_io__get_sw1_IgnoreAndReturn(cmock_retval) board_io__get_sw1_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void board_io__get_sw1_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, gpio_s cmock_to_return);
#define board_io__get_sw1_ExpectAndReturn(cmock_retval) board_io__get_sw1_CMockExpectAndReturn(__LINE__, cmock_retval)
void board_io__get_sw1_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, gpio_s cmock_to_return);
typedef gpio_s (* CMOCK_board_io__get_sw1_CALLBACK)(int cmock_num_calls);
void board_io__get_sw1_AddCallback(CMOCK_board_io__get_sw1_CALLBACK Callback);
void board_io__get_sw1_Stub(CMOCK_board_io__get_sw1_CALLBACK Callback);
#define board_io__get_sw1_StubWithCallback board_io__get_sw1_Stub
#define board_io__get_sw1_ExpectAndThrow(cmock_to_throw) board_io__get_sw1_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void board_io__get_sw1_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define board_io__get_sw2_IgnoreAndReturn(cmock_retval) board_io__get_sw2_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void board_io__get_sw2_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, gpio_s cmock_to_return);
#define board_io__get_sw2_ExpectAndReturn(cmock_retval) board_io__get_sw2_CMockExpectAndReturn(__LINE__, cmock_retval)
void board_io__get_sw2_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, gpio_s cmock_to_return);
typedef gpio_s (* CMOCK_board_io__get_sw2_CALLBACK)(int cmock_num_calls);
void board_io__get_sw2_AddCallback(CMOCK_board_io__get_sw2_CALLBACK Callback);
void board_io__get_sw2_Stub(CMOCK_board_io__get_sw2_CALLBACK Callback);
#define board_io__get_sw2_StubWithCallback board_io__get_sw2_Stub
#define board_io__get_sw2_ExpectAndThrow(cmock_to_throw) board_io__get_sw2_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void board_io__get_sw2_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define board_io__get_sw3_IgnoreAndReturn(cmock_retval) board_io__get_sw3_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void board_io__get_sw3_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, gpio_s cmock_to_return);
#define board_io__get_sw3_ExpectAndReturn(cmock_retval) board_io__get_sw3_CMockExpectAndReturn(__LINE__, cmock_retval)
void board_io__get_sw3_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, gpio_s cmock_to_return);
typedef gpio_s (* CMOCK_board_io__get_sw3_CALLBACK)(int cmock_num_calls);
void board_io__get_sw3_AddCallback(CMOCK_board_io__get_sw3_CALLBACK Callback);
void board_io__get_sw3_Stub(CMOCK_board_io__get_sw3_CALLBACK Callback);
#define board_io__get_sw3_StubWithCallback board_io__get_sw3_Stub
#define board_io__get_sw3_ExpectAndThrow(cmock_to_throw) board_io__get_sw3_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void board_io__get_sw3_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
